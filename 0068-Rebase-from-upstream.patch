From 5d1bcc314f8176d33b3d9f253fdbf4d3b1e0127a Mon Sep 17 00:00:00 2001
From: William Woodall <william@osrfoundation.org>
Date: Wed, 23 Sep 2015 18:58:08 -0700
Subject: [PATCH 68/70] Rebase from 'upstream'

---
 CMakeLists.txt                 | 39 ---------------------------------------
 cmake/internal/FindOS.cmake    | 36 ++++++++++++++++++------------------
 libstageplugin/p_graphics.cc   |  4 ----
 libstageplugin/p_simulation.cc |  5 -----
 stage-config-version.cmake.in  | 11 -----------
 stage-config.cmake.in          | 14 --------------
 stage.pc.in                    |  6 +++---
 7 files changed, 21 insertions(+), 94 deletions(-)
 delete mode 100644 stage-config-version.cmake.in
 delete mode 100644 stage-config.cmake.in

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 43df72b..8710637 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -102,7 +102,6 @@ ELSE( PNG_FOUND )
    MESSAGE( ${INDENT} "PNG library not detected" )
 ENDIF( PNG_FOUND )
    
-set (FLTK_SKIP_FLUID TRUE)
 find_package( FLTK REQUIRED )
 IF( FLTK_FOUND )
 #  MESSAGE( STATUS ${INDENT} "FLTK_LIBRARIES=${FLTK_LIBRARIES}" )
@@ -135,29 +134,10 @@ ELSE( PLAYER_FOUND )
   MESSAGE(STATUS ${INDENT} "Player not detected. If Player is installed but not detected, check your PKG_CONFIG_PATH." )
 ENDIF( PLAYER_FOUND )
 
-# Format the fltk libraries for inclusion in stage.pc
-SET(PC_LIBRARIES ${FLTK_LIBRARIES} ${OPENGL_LIBRARIES})
-SET(PC_INCLUDE_DIRS ${FLTK_INCLUDE_DIR} ${OPENGL_INCLUDE_DIR})
-
-SET(PC_LINK_FLAGS "")
-FOREACH(LIB ${PC_LIBRARIES})
-  GET_FILENAME_COMPONENT(LIBNAME ${LIB} NAME_WE)
-  STRING(REGEX REPLACE "^lib" "" LINKLIB ${LIBNAME})
-  SET(PC_LINK_FLAGS "${PC_LINK_FLAGS} -l${LINKLIB}")
-ENDFOREACH(LIB ${FLTK_LIBRARIES})
-
-SET(PC_INCLUDE_FLAGS "")
-FOREACH(INC ${PC_INCLUDE_DIRS})
-  SET(PC_INCLUDE_FLAGS "${PC_INCLUDE_FLAGS} -I${INC}")
-ENDFOREACH(INC ${PC_INCLUDE_DIRS})
-
 # Create the pkgconfig file
 CONFIGURE_FILE (${CMAKE_CURRENT_SOURCE_DIR}/stage.pc.in ${CMAKE_CURRENT_BINARY_DIR}/stage.pc @ONLY)
 INSTALL (FILES ${CMAKE_CURRENT_BINARY_DIR}/stage.pc DESTINATION ${PROJECT_LIB_DIR}/pkgconfig/)
 
-# Install catkin package.xml
-install(FILES package.xml DESTINATION share/stage)
-
 MESSAGE( STATUS "Installation path CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}" )
 
 # all targets need these include directories
@@ -182,25 +162,6 @@ IF ( BUILD_PLAYER_PLUGIN AND PLAYER_FOUND )
   ADD_SUBDIRECTORY(libstageplugin)
 ENDIF ( BUILD_PLAYER_PLUGIN AND PLAYER_FOUND )	 
 
-# Create the CMake module files (needs to be run after the stage target was created)
-if (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION} GREATER 2.8.11)
-  # Use a generator expression if the version of cmake allows it.
-  set(STAGE_TARGET_NAME "$<TARGET_FILE_NAME:stage>")
-else()
-  # Otherwise use the LOCATION property of the target (this will produce a warning on newer versions of cmake)
-  get_property(location_ TARGET stage PROPERTY LOCATION)
-  get_filename_component(STAGE_TARGET_NAME "${location_}" NAME)
-  unset(location_)
-endif()
-CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/stage-config.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/stage-config.cmake @ONLY)
-if (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION} GREATER 2.8.11)
-  # Also run it through file(GENERATE ...) to expand generator expressions (if the version of cmake supports it).
-  FILE (GENERATE
-    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/stage-config.cmake
-    INPUT ${CMAKE_CURRENT_BINARY_DIR}/stage-config.cmake)
-endif()
-CONFIGURE_FILE (${CMAKE_CURRENT_SOURCE_DIR}/stage-config-version.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/stage-config-version.cmake @ONLY)
-INSTALL (FILES ${CMAKE_CURRENT_BINARY_DIR}/stage-config.cmake ${CMAKE_CURRENT_BINARY_DIR}/stage-config-version.cmake DESTINATION ${PROJECT_LIB_DIR}/cmake/${PROJECT_NAME})
 
 # generate a cpack config file used to create packaged tarballs
 IF ( CPACK_CFG )
diff --git a/cmake/internal/FindOS.cmake b/cmake/internal/FindOS.cmake
index 5666bbc..cec4491 100644
--- a/cmake/internal/FindOS.cmake
+++ b/cmake/internal/FindOS.cmake
@@ -45,28 +45,28 @@ ELSE (PROJECT_OS_LINUX)
 ENDIF (PROJECT_OS_LINUX)
 
 # 32 or 64 bit Linux
-# IF (PROJECT_OS_LINUX)
-#     # Set the library directory suffix accordingly
-#     IF (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
-#         SET (PROJECT_PROC_64BIT TRUE BOOL INTERNAL)
-#         MESSAGE (STATUS "Linux x86_64 Detected")
-#     ELSEIF (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ppc64")
-#         MESSAGE (STATUS "Linux ppc64 Detected")
-#         SET (PROJECT_PROC_64BIT TRUE BOOL INTERNAL)
-#     ELSEIF ($CMAKE_SYSTEM_PROCESSOR} STREQUAL "s390x")
-# 	MESSAGE (STATEUS "Linux s390x Detected")
-# 	SET (PROJECT_PROC_64BIT TRUE BOOL INTERNAL)
-#     ENDIF (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
-# ENDIF (PROJECT_OS_LINUX)
+IF (PROJECT_OS_LINUX)
+    # Set the library directory suffix accordingly
+    IF (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
+        SET (PROJECT_PROC_64BIT TRUE BOOL INTERNAL)
+        MESSAGE (STATUS "Linux x86_64 Detected")
+    ELSEIF (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ppc64")
+        MESSAGE (STATUS "Linux ppc64 Detected")
+        SET (PROJECT_PROC_64BIT TRUE BOOL INTERNAL)
+    ELSEIF ($CMAKE_SYSTEM_PROCESSOR} STREQUAL "s390x")
+	MESSAGE (STATEUS "Linux s390x Detected")
+	SET (PROJECT_PROC_64BIT TRUE BOOL INTERNAL)
+    ENDIF (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
+ENDIF (PROJECT_OS_LINUX)
 
-# IF(PROJECT_PROC_64BIT)
+IF(PROJECT_PROC_64BIT)
     # Set the install path to lib64
-    # SET(PROJECT_LIB_DIR "lib64")
-    # SET(PROJECT_PLUGIN_DIR "lib64/${PROJECT_NAME}-${APIVERSION}")
-# ELSE (PROJECT_PROC_64BIT)
+    SET(PROJECT_LIB_DIR "lib64")
+    SET(PROJECT_PLUGIN_DIR "lib64/${PROJECT_NAME}-${APIVERSION}")
+ELSE (PROJECT_PROC_64BIT)
     SET(PROJECT_LIB_DIR "lib")
     SET(PROJECT_PLUGIN_DIR "lib/${PROJECT_NAME}-${APIVERSION}")
-# ENDIF (PROJECT_PROC_64BIT)
+ENDIF (PROJECT_PROC_64BIT)
 
 MESSAGE(STATUS "Installing Libraries to ${CMAKE_INSTALL_PREFIX}/${PROJECT_LIB_DIR}")
 MESSAGE(STATUS "Installing Plugins to ${CMAKE_INSTALL_PREFIX}/${PROJECT_PLUGIN_DIR}")
diff --git a/libstageplugin/p_graphics.cc b/libstageplugin/p_graphics.cc
index 516f4ae..af5d0e0 100644
--- a/libstageplugin/p_graphics.cc
+++ b/libstageplugin/p_graphics.cc
@@ -232,10 +232,8 @@ int InterfaceGraphics2d::ProcessMessage(QueuePointer & resp_queue,
 			PLAYER_GRAPHICS2D_CMD_POINTS, this->addr)
 			|| Message::MatchMessage(hdr, PLAYER_MSGTYPE_CMD,
 					PLAYER_GRAPHICS2D_CMD_POLYLINE, this->addr)
-#ifdef PLAYER_GRAPHICS2D_CMD_MULTILINE
 			|| Message::MatchMessage(hdr, PLAYER_MSGTYPE_CMD,
                                         PLAYER_GRAPHICS2D_CMD_MULTILINE, this->addr)
-#endif
 			|| Message::MatchMessage(hdr, PLAYER_MSGTYPE_CMD,
 					PLAYER_GRAPHICS2D_CMD_POLYGON, this->addr)) {
 		Message msg(*hdr, data);
@@ -276,7 +274,6 @@ void PlayerGraphics2dVis::RenderItem(Message & item) {
 	}
 		break;
 
-#ifdef PLAYER_GRAPHICS2D_CMD_MULTILINE
         case PLAYER_GRAPHICS2D_CMD_MULTILINE: {
                 player_graphics2d_cmd_multiline_t
                                 & data =
@@ -288,7 +285,6 @@ void PlayerGraphics2dVis::RenderItem(Message & item) {
                 glEnd();
         }
                 break;
-#endif
 
 
 
diff --git a/libstageplugin/p_simulation.cc b/libstageplugin/p_simulation.cc
index 9fb2046..83d410e 100644
--- a/libstageplugin/p_simulation.cc
+++ b/libstageplugin/p_simulation.cc
@@ -60,11 +60,6 @@ extern PlayerTime* GlobalTime;
 
 #define DRIVER_ERROR(X) printf( "Stage driver error: %s\n", X )
 
-#ifndef PLAYER_CAPABILITIES_REQ
-#ifdef PLAYER_CAPABILTIES_REQ
-#define PLAYER_CAPABILITIES_REQ PLAYER_CAPABILTIES_REQ
-#endif
-#endif
 
 ////////////////////////////////////////////////////////////////////////////////////
 
diff --git a/stage-config-version.cmake.in b/stage-config-version.cmake.in
deleted file mode 100644
index 519fd68..0000000
--- a/stage-config-version.cmake.in
+++ /dev/null
@@ -1,11 +0,0 @@
-set(PACKAGE_VERSION "@VERSION@")
- 
-# Check whether the requested PACKAGE_FIND_VERSION is compatible
-if("${PACKAGE_VERSION}" VERSION_LESS "${PACKAGE_FIND_VERSION}")
-  set(PACKAGE_VERSION_COMPATIBLE FALSE)
-else()
-  set(PACKAGE_VERSION_COMPATIBLE TRUE)
-  if ("${PACKAGE_VERSION}" VERSION_EQUAL "${PACKAGE_FIND_VERSION}")
-    set(PACKAGE_VERSION_EXACT TRUE)
-  endif()
-endif()
diff --git a/stage-config.cmake.in b/stage-config.cmake.in
deleted file mode 100644
index 676157c..0000000
--- a/stage-config.cmake.in
+++ /dev/null
@@ -1,14 +0,0 @@
-# - Config file for Stage
-# It defines the following variables:
-#    STAGE_INCLUDE_DIRS - Stage Include directories
-#    STAGE_LIBRARIES    - Stage link libraries
-
-set(STAGE_INCLUDE_DIRS "${stage_DIR}/../../../include/@PROJECT_NAME@-@APIVERSION@" 
-  "@FLTK_INCLUDE_DIR@"
-  "@OPENGL_INCLUDE_DIR@")
-list(REMOVE_DUPLICATES STAGE_INCLUDE_DIRS)
-set(STAGE_LIBRARIES 
-  "${stage_DIR}/../../../@PROJECT_LIB_DIR@/@STAGE_TARGET_NAME@"
-  "@FLTK_LIBRARIES@"
-  "@OPENGL_gl_LIBRARIES@")
-  
diff --git a/stage.pc.in b/stage.pc.in
index c74bde2..873fd27 100644
--- a/stage.pc.in
+++ b/stage.pc.in
@@ -1,4 +1,4 @@
-prefix="@CMAKE_INSTALL_PREFIX@"
+prefix=@CMAKE_INSTALL_PREFIX@
 
 Name: stage
 Description: Stage robot simulation program, C++ library and Player plugin - part of the Player Project (http://playerstage.org)
@@ -10,5 +10,5 @@ Version: @VERSION@
 # add the incantations to the flags and libs lines below 
 Requires:
 
-Libs: -L${prefix}/@PROJECT_LIB_DIR@ -lstage @PC_LINK_FLAGS@
-Cflags: -I${prefix}/include/Stage-@APIVERSION@ @PC_INCLUDE_FLAGS@
+Libs: -L${prefix}/@PROJECT_LIB_DIR@ -lstage @FLTK_LDFLAGS@
+Cflags: -I${prefix}/include/Stage-@APIVERSION@ @FLTK_CFLAGS@ 
-- 
2.6.4 (Apple Git-63)

